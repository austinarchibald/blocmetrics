{"version":3,"sources":["ember-cli-app-version.js","ember-cli-content-security-policy.js","ember-highcharts.js","ember-highcharts/components/high-charts.js","ember-highcharts/utils/option-loader.js"],"sourcesContent":["define(\"ember-cli-app-version\", [\"ember-cli-app-version/index\", \"ember\", \"exports\"], function(__index__, __Ember__, __exports__) {\n  \"use strict\";\n  __Ember__[\"default\"].keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define(\"ember-cli-content-security-policy\", [\"ember-cli-content-security-policy/index\", \"ember\", \"exports\"], function(__index__, __Ember__, __exports__) {\n  \"use strict\";\n  __Ember__[\"default\"].keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define(\"ember-highcharts\", [\"ember-highcharts/index\", \"ember\", \"exports\"], function(__index__, __Ember__, __exports__) {\n  \"use strict\";\n  __Ember__[\"default\"].keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define('ember-highcharts/components/high-charts', ['exports', 'ember', 'ember-highcharts/utils/option-loader'], function (exports, Ember, option_loader) {\n\n  'use strict';\n\n  var computed = Ember['default'].computed;\n  var get = Ember['default'].get;\n  var set = Ember['default'].set;\n  var merge = Ember['default'].merge;\n  var on = Ember['default'].on;\n  var observer = Ember['default'].observer;\n  var run = Ember['default'].run;\n\n  exports['default'] = Ember['default'].Component.extend({\n    classNames: [\"highcharts-wrapper\"],\n    content: undefined,\n    mode: undefined,\n    chartOptions: undefined,\n    chart: null,\n    theme: undefined,\n    callback: undefined,\n\n    buildOptions: computed(\"chartOptions\", \"content.@each.isLoaded\", function () {\n      var chartOptions = Ember['default'].$.extend(true, {}, get(this, \"theme\"), get(this, \"chartOptions\"));\n      var chartContent = get(this, \"content.length\") ? get(this, \"content\") : [{\n        id: \"noData\",\n        data: 0,\n        color: \"#aaaaaa\"\n      }];\n\n      var defaults = { series: chartContent };\n\n      return merge(defaults, chartOptions);\n    }),\n\n    contentDidChange: observer(\"content.@each.isLoaded\", function () {\n      if (!(get(this, \"content\") && get(this, \"chart\"))) {\n        return;\n      }\n\n      var chart = get(this, \"chart\");\n      var noData = chart.get(\"noData\");\n\n      if (noData != null) {\n        noData.remove();\n      }\n\n      return get(this, \"content\").forEach(function (series, idx) {\n        if (chart.series[idx]) {\n          return chart.series[idx].setData(series.data);\n        } else {\n          return chart.addSeries(series);\n        }\n      });\n    }),\n\n    drawAfterRender: function drawAfterRender() {\n      run.scheduleOnce(\"afterRender\", this, \"draw\");\n    },\n\n    draw: function draw() {\n      var completeChartOptions = [get(this, \"buildOptions\"), get(this, \"callback\")];\n      var mode = get(this, \"mode\");\n\n      if (typeof mode === \"string\" && !!mode) {\n        completeChartOptions.unshift(mode);\n      }\n\n      var $element = this.$();\n      var chart = $element.highcharts.apply($element, completeChartOptions).highcharts();\n\n      set(this, \"chart\", chart);\n    },\n\n    _renderChart: on(\"didInsertElement\", function () {\n      this.drawAfterRender();\n      option_loader.setDefaultHighChartOptions(this.container);\n    }),\n\n    _destroyChart: on(\"willDestroyElement\", function () {\n      this._super();\n      get(this, \"chart\").destroy();\n    })\n  });\n\n});","define('ember-highcharts/utils/option-loader', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports.setDefaultHighChartOptions = setDefaultHighChartOptions;\n\n  var localConfig = null;\n  function setDefaultHighChartOptions(container) {\n    if (!localConfig) {\n      // use options defined in highcharts-config if they exist in the container\n      var localConfigBuilder = container.lookup(\"highcharts-config:application\");\n      if (localConfigBuilder) {\n        localConfig = localConfigBuilder(defaultOptions);\n      } else {\n        localConfig = defaultOptions;\n      }\n    }\n\n    Highcharts.setOptions(localConfig);\n  }\n\n  var defaultOptions = {\n    plotOptions: {\n      series: {\n        shadow: false\n      }\n    },\n\n    global: {\n      timezoneOffset: new Date().getTimezoneOffset()\n    },\n\n    credits: {\n      enabled: false\n    }\n  };\n\n});"],"names":[],"mappingsnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"addons.js"}