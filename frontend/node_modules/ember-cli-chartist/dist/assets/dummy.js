define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', './config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  var App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('dummy/components/chart-fish-over-time', ['exports', 'ember', './chartist-chart'], function (exports, Ember, ChartistChart) {

  'use strict';

  function getData () {
    return new Ember['default'].RSVP.Promise(function(resolve) {
      Ember['default'].run.later(function() {
        resolve({
          labels: [
            'Salmon', 'Yellowtail', 'Dolphin', 'Cow'
          ],
          series: [
            ['2', '8', '3', '9']
          ]
        });
      }, 500);
    });
  }

  exports['default'] = ChartistChart['default'].extend({
    init: function () {
      getData().then(function (data) {
        this.set('data', data);
      }.bind(this));

      this._super();

      // An example showing that the chart will update when the data changes.
      Ember['default'].run.later(function() {
        var newData = {
          labels: [
            'Salmon', 'Yellowtail', 'Dolphin', 'Cow'
          ],
          series: [
            ['22', '18', '0', '19']
          ]
        };

        this.set('data', newData);
      }.bind(this), 4000);
    },

    ratio: 'ct-minor-seventh',
    options: {
      showPoint: false,
      axisY: {
        offset: 0,
        showLabel: false,
        showGrid: true,
      },
      axisX: {
        showGrid: false,
      }
    },

    responsiveOptions: [
      ['screen and (min-width: 640px)', {
        showPoint: true,
        axisY: {
          offset: 50,
          showLabel: true
        }
      }]
    ]
  });

});
define('dummy/components/chartist-chart', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var UNDEF,
    // This is the structure that chartist is expecting
    defaultDataStructure = {labels: [], series: []};

  exports['default'] = Ember['default'].Component.extend({
    chart: UNDEF,

    classNameBindings: ['ratio'],
    classNames: ['ct-chart'],

    // The ratio of the chart as it scales up/down in size.
    //
    // Available ratios:
    //
    // name              ratio
    // ct-square         1
    // ct-minor-second   15:16
    // ct-major-second   8:9
    // ct-minor-third    5:6
    // ct-major-third    4:5
    // ct-perfect-fourth 3:4
    // ct-perfect-fifth  2:3
    // ct-minor-sixth    5:8
    // ct-golden-section 1:1.618
    // ct-major-sixth    3:5
    // ct-minor-seventh  9:16
    // ct-major-seventh  8:15
    // ct-octave         1:2
    // ct-major-tenth    2:5
    // ct-major-eleventh 3:8
    // ct-major-twelfth  1:3
    // ct-double-octave  1:4
    ratio: 'ct-square',

    type: 'line',
    chartType: function () {
      return this.get('type').capitalize();
    }.property('type'),

    data: defaultDataStructure,
    options: UNDEF,
    responsiveOptions: UNDEF,
    updateOnData: true,
    
    // This is where the business happens. This will only run if checkForReqs
    // doesn't find any problems.
    renderChart: function () {
      var chart = new (Chartist[this.get('chartType')])(
        this.get('element'),
        this.get('data'),
        this.get('options'),
        this.get('responsiveOptions')
      );

      this.set('chart', chart);
    }.on('didInsertElement'),

    onData: function () {
      if (this.get('updateOnData')) {
        this.get('chart').update(this.get('data'));
      }
    }.observes('data'),

    // Before trying to do anything else, let's check to see if any necessary
    // attributes are missing or if anything else is fishy about attributes
    // provided to the component in the template.
    //
    // We're doing this to help ease people into this project. Instead of just
    // getting some "uncaught exception" we're hoping these error messages will
    // point them in the right direction.
    checkForReqs: function () {
      var data = this.get('data'),
      type = this.get('type');

      if (typeof data === 'string') {
        console.info('Chartist-chart: The value of the "data" attribute on should be an object, it\'s a string.');
        this.set('data', defaultDataStructure);
      }

      if (!type || !Chartist[this.get('chartType')]) {
        console.info('Chartist-chart: Invalid or missing "type" attribute, defaulting to "line".');
        this.set('type', 'line');
      }
    }.on('init')
  });

});
define('dummy/components/pie-i-like', ['exports', './chartist-chart'], function (exports, ChartistChart) {

  'use strict';

  exports['default'] = ChartistChart['default'].extend({
    type: 'pie',
    data: {
      labels: ['Chocolate', 'Apple', 'Pumpkin'],
      series: [30, 15, 65]
    }
  });

});
define('dummy/controllers/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ObjectController.extend({
    chartResOptions: [
      ['screen and (min-width: 640px)', {
        showArea: true,
        lineSmooth: false,

        axisX: {
          showLabel: false
        }
      }]
    ]
  });

});
define('dummy/initializers/export-application-global', ['exports', 'ember', '../config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize(container, application) {
    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);

    if (config['default'].exportApplicationGlobal) {
      window[classifiedName] = application;
    }
  };

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };

});
define('dummy/router', ['exports', 'ember', './config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  Router.map(function() {
  });

  exports['default'] = Router;

});
define('dummy/routes/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function () {
      return {
        chartData: {
          labels: ['Week1', 'Week2', 'Week3', 'Week4', 'Week5', 'Week6'],
          series: [
            [5, 4, 3, 7, 5, 10],
            [3, 2, 9, 5, 4, 6],
            [2, 1, -3, -4, -2, 0],
            [8, -2, 1, 7, -3, 1]
          ]
        }
      };
    }
  });

});
define('dummy/templates/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


    data.buffer.push("<div class=\"container\">\n  ");
    data.buffer.push(escapeExpression((helper = helpers['chartist-chart'] || (depth0 && depth0['chartist-chart']),options={hash:{
      'type': ("bar"),
      'data': ("model.chartData"),
      'responsiveOptions': ("chartResOptions")
    },hashTypes:{'type': "STRING",'data': "ID",'responsiveOptions': "ID"},hashContexts:{'type': depth0,'data': depth0,'responsiveOptions': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "chartist-chart", options))));
    data.buffer.push("\n\n  ");
    stack1 = helpers._triageMustache.call(depth0, "chart-fish-over-time", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n\n  ");
    stack1 = helpers._triageMustache.call(depth0, "pie-i-like", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n</div>\n");
    return buffer;
    
  });

});
define('dummy/templates/components/chart-fish-over-time', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    


    data.buffer.push("<h3>Some extra content in the template if needed.</h3>\n");
    
  });

});
define('dummy/templates/components/chartist-chart', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};
    var buffer = '', stack1;


    stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
    data.buffer.push("\n");
    return buffer;
    
  });

});
define('dummy/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('dummy/tests/components/chart-fish-over-time.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/chart-fish-over-time.js should pass jshint', function() { 
    ok(true, 'components/chart-fish-over-time.js should pass jshint.'); 
  });

});
define('dummy/tests/components/pie-i-like.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/pie-i-like.js should pass jshint', function() { 
    ok(true, 'components/pie-i-like.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/application.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/application.js should pass jshint', function() { 
    ok(true, 'controllers/application.js should pass jshint.'); 
  });

});
define('dummy/tests/dummy/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - dummy/tests/helpers');
  test('dummy/tests/helpers/resolver.js should pass jshint', function() { 
    ok(true, 'dummy/tests/helpers/resolver.js should pass jshint.'); 
  });

});
define('dummy/tests/dummy/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - dummy/tests/helpers');
  test('dummy/tests/helpers/start-app.js should pass jshint', function() { 
    ok(true, 'dummy/tests/helpers/start-app.js should pass jshint.'); 
  });

});
define('dummy/tests/dummy/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - dummy/tests');
  test('dummy/tests/test-helper.js should pass jshint', function() { 
    ok(true, 'dummy/tests/test-helper.js should pass jshint.'); 
  });

});
define('dummy/tests/dummy/tests/unit/components/chartist-chart-test.jshint', function () {

  'use strict';

  module('JSHint - dummy/tests/unit/components');
  test('dummy/tests/unit/components/chartist-chart-test.js should pass jshint', function() { 
    ok(true, 'dummy/tests/unit/components/chartist-chart-test.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', '../../config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('dummy/tests/helpers/start-app', ['exports', 'ember', '../../app', '../../router', '../../config/environment'], function (exports, Ember, Application, Router, config) {

  'use strict';

  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function() {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }
  exports['default'] = startApp;

});
define('dummy/tests/router.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('router.js should pass jshint', function() { 
    ok(true, 'router.js should pass jshint.'); 
  });

});
define('dummy/tests/routes/application.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/application.js should pass jshint', function() { 
    ok(true, 'routes/application.js should pass jshint.'); 
  });

});
define('dummy/tests/test-helper', ['./helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

  'use strict';

  ember_qunit.setResolver(resolver['default']);

  document.write('<div id="ember-testing-container"><div id="ember-testing"></div></div>');

  QUnit.config.urlConfig.push({ id: 'nocontainer', label: 'Hide container'});
  var containerVisibility = QUnit.urlParams.nocontainer ? 'hidden' : 'visible';
  document.getElementById('ember-testing-container').style.visibility = containerVisibility;

});
define('dummy/tests/unit/components/chartist-chart-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  /* global Ember */

  ember_qunit.moduleForComponent('chartist-chart', 'ChartistChartComponent', {});

  var chartData = {
      labels: ['Week1', 'Week2', 'Week3', 'Week4', 'Week5', 'Week6'],
      series: [
        [5, 4, 3, 7, 5, 10],
        [3, 2, 9, 5, 4, 6],
        [2, 1, -3, -4, -2, 0]
      ]
    },
    pieChartData = {
      labels: ['Pizza', 'Fish', 'Puppies'],
      series: [
        [40, 25, 25]
      ]
    };

  ember_qunit.test('it renders', function() {
    expect(2);

    var component = this.subject({
      data: chartData
    });

    equal(component._state, 'preRender');

    this.append();
    equal(component._state, 'inDOM');
  });

  ember_qunit.test('it should not error when the data property or attribute is not provided', function() {
    expect(1);

    var component = this.subject();

    this.append();
    equal(component._state, 'inDOM');
  });

  ember_qunit.test('it can be a line chart', function() {
    expect(1);

    var component = this.subject({
      data: chartData
    });

    component.set('type', 'line');
    this.append();

    var chart = component.get('chart');
    equal(chart.options.classNames.chart, 'ct-chart-line');
  });

  ember_qunit.test('it can be a bar chart', function() {
    expect(1);

    var component = this.subject({
      data: chartData
    });

    component.set('type', 'bar');
    this.append();

    var chart = component.get('chart');
    equal(chart.options.classNames.chart, 'ct-chart-bar');
  });

  ember_qunit.test('it can be a pie chart', function() {
    expect(1);

    var component = this.subject({
      data: pieChartData
    });

    component.set('type', 'pie');
    this.append();

    var chart = component.get('chart');
    equal(chart.options.classNames.chart, 'ct-chart-pie');
  });

  ember_qunit.test('it can have different ratios', function () {
    expect(1);

    var component = this.subject({
      data: chartData
    });

    var ratio = 'ct-minor-second';
    component.set('ratio', ratio);
    ok(this.$().hasClass(ratio));
  });

  ember_qunit.test('it can be configured with the options attribute', function () {
    expect(4);

    var component = this.subject({
      data: chartData
    });

    component.set('options', {
      showArea: false,
      lineSmooth: false,
      axisX: {
        showGrid: false
      },
      axisY: {
        showLabel: false
      }
    });

    this.append();

    var chart = component.get('chart');
    var opts = chart.options;

    equal(opts.showArea, false);
    equal(opts.lineSmooth, false);
    equal(opts.axisX.showGrid, false);
    equal(opts.axisY.showLabel, false);
  });

  ember_qunit.test('it can be configured with the responsiveOptions attribute', function () {
    expect(3);

    var component = this.subject({
      data: chartData
    });

    component.set('responsiveOptions', [
      ['screen and (min-width: 640px)', {
        showArea: true,
        lineSmooth: false,

        axisX: {
          showLabel: false
        }
      }]
    ]);

    this.append();

    var chart = component.get('chart');
    var resOpts = chart.responsiveOptions;

    equal(resOpts[0][1].showArea, true);
    equal(resOpts[0][1].lineSmooth, false);
    equal(resOpts[0][1].axisX.showLabel, false);
  });

  ember_qunit.test('it should update the chart when data is changed', function () {
    expect(2);

    var component = this.subject({
      data: chartData
    });

    var createdEventWasCalled = 0;

    var newData = {
      labels: ['Week1', 'Week2', 'Week3', 'Week4', 'Week5', 'Week6'],
      series: [
        [8, 10, 31, 17, 25, 11]
      ]
    };

    component.set('type', 'line');
    this.append();

    // NOTE: Is seems strange to listen for the created event, but I couldn't
    // find an 'updated' event being emitted by Chartist.
    // This should be called when the chart is initially drawn, and then again
    // when the data updates.
    component.get('chart').on('created', function () {
      createdEventWasCalled++;
    });

    stop();

    Ember.run.later(function() {
      start();

      component.set('data', newData);

      equal(component.get('data'), newData);
      equal(createdEventWasCalled, 2);
    }, 1000);
  });

  ember_qunit.test('it should not automatically update when updateOnData is false', function () {
    expect(1);

    var component = this.subject({
      data: chartData
    });

    var createdEventWasCalled = 0;

    var newData = {
      labels: ['Week1', 'Week2', 'Week3', 'Week4', 'Week5', 'Week6'],
      series: [
        [8, 10, 31, 17, 25, 11]
      ]
    };

    component.set('updateOnData', false);
    this.append();

    component.get('chart').on('created', function () {
      createdEventWasCalled++;
    });

    stop();

    Ember.run.later(function() {
      start();
      component.set('data', newData);
      equal(createdEventWasCalled, 1);
    }, 500);
  });

});
/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map